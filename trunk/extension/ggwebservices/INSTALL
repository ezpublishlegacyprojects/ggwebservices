1 - activate the extension following the standard eZ Publish procedures
    (remember to regenerate the ezp_extension.php file)

    To use the debugger, you will have to alter by hand the autoload file, as
    the one generated by eZ Publish does not recognize php classes declared
    inside .inc files. Add these lines:

      'xmlrpc_client'           => 'extension/ggwebservices/lib/xmlrpc/xmlrpc.inc',
      'xmlrpcmsg'               => 'extension/ggwebservices/lib/xmlrpc/xmlrpc.inc',
      'xmlrpcresp'              => 'extension/ggwebservices/lib/xmlrpc/xmlrpc.inc',
      'xmlrpcval'               => 'extension/ggwebservices/lib/xmlrpc/xmlrpc.inc',
      'jsonrpc_client'          => 'extension/ggwebservices/lib/json/jsonrpc.inc',
      'jsonrpcmsg'              => 'extension/ggwebservices/lib/json/jsonrpc.inc',
      'jsonrpcresp'             => 'extension/ggwebservices/lib/json/jsonrpc.inc',
      'jsonrpcval'              => 'extension/ggwebservices/lib/json/jsonrpc.inc',

    To avoid the webservice logs to grow indefinitely and potentially fill up
    your hard disk, add the rotatewslogs.php cronjob script to a cronjob part
    you run periodically, such as 'infrequent', or schedule execution of the
    'rotatewslogs' part (see the documentation aboyt cronjobs for more details
    on how to set it up)

2 - there is no fight club!

3 - to receive jsonrpc or xmlrpc webservice calls:
  + copy the files jsonrpc.php/xmlrpc.php to the eZ Publish installation root
    folder
  + modify the Apache rewrite rules / the .htaccess file so that they are
    accessible from the web
  + define the php functions you want to expose as webservices in the file
    "initialize.php" in either a "phpxmlrpc" or "jsonrpc" folder in the
    eZ Publish installation root folder (or in a "phpxmlrpc" or "jsonrpc"
    folder inside an extension that is listed in the JSONRPCExtensions/
    XMLRPCExtensions array setting)

4 - to make webservice calls to external server via templates
  + define the remote servers that will be made accessible in the
    wsproviders.ini.append.php file
  + use the fetch( 'webservices', 'call' ) template fetch function. It takes
    3 parameters: name of the remote server, name of the ws method to execute
    and array of ws method parameters
  + raise the 'Logging' parameter in wsproviders.ini file to 'info' to have
    complete traces of webservice communication in var/nameofsiteaccess/log

5 - to enable js code in the browser to call webservices on remote servers
    (cross domain requests):
  + define the remote servers that will be made accessible in the
    wsproviders.ini.append.php file
  + give access permissions to the webservices/proxy function to the desired
    eZ Publish user, possibly with a limitation on remote server
  + the url to be called is: http://my.ez.server/index.php/siteaccess/webservices/proxy/protocol/remoteservername
    where protocol is either "phpxmlrpc" or "jsonrpc", and remoteservername is
    the name of a server defined in wsproviders.ini.append.php file (the remote
    server can use a different protocol, such as soap, from the one used by the
    browser)

6 - more detailed info in the README file
