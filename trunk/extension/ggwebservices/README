GG Webservices extension for eZ Publish
========================================

An extension that adds/improves the native capabilities of eZ Publish to work as
- webservices server
- webservices client
with a visual webservices debugger thrown in for good measure


Goals:

Allow to easily execute calls to remote servers using JSONRPC, XMLRPC and SOAP protocols or REST schemes (both from within php code and templates)
Allow to expose existing functionality as JSONRPC or XMLRPC, REST (and eventually better SOAP) webservices, much as it can already be done with SOAP and eZJSCore in any eZ Publish installation
Allow to expose functionality as webservice regardless of the protocol used by the client - without having to duplicate code
Provide a proxy module allowing javascript code served by an eZ Publish server to execute cross-domain webservice calls (without resorting to html tricks) and even cross-protocol calls
Allow easy debugging of webservice calls via inclusion of a complete debugging interface
Improve support for WSDL in soap calls (both server-side and client-side)
Improve the existing http client adding features such as support for more authentication schemes, compressed requests etc...
Allow usage of JSONRPC or XMLRPC (and eventually SOAP) to call functions exposed via the ezjscore extension API
Keep the same API as the existing eZP SOAP classes for maximum interoperability
Long term, the existing SOAP client and server could be replaced with a new one, based either on PHP::SOAP or NuSOAP


Prerequisites:

PHP 5 / eZP 4.0+
to execute/receive jsonrpc calls, the php JSON extension is needed
to execute/receive rest calls, the php SIMPLEXML or JSON extensions are needed
to execute/receive xmlrpc calls, the php XMLRPC extension is needed
to call remote services using wsdl descriptions the php SOAP extension is needed
to integrate with the ezjscore extension, eZP 4.2 is needed (and the ezjscore extension too, of course)


Basics:

Server side:
- to receive xmlrpc, jsonrpc or 'rest' calls, you need to:
  1 - modify the configuration in wsproviders.ini and possibly in site.ini.append.php
  2 - create a file extension/xxx/<jsonrpc|xmlrpc|rest>/initialize.php with the php code to be exposed as webservice

Client side:
- every remote webservice server that has to be accessed from the eZ Publish server itself has to be defined in wsproviders.ini
- to call remote webservices from within templates use the fetch( 'webservices', 'call', hash( ... ) ) template fetch function.
  Please remember to desactivate the view cache where needed for node templates that execute webservice calls
- to call remote webservices from php code use ggeZWebServicesClient::send( $server, $metod, $params=array() );

For more details, read the INSTALL file.


Modules and Views:

- webservices/debugger: view used to display a WS debugger in the admin interface. Currently limited to jsonrpc/xmlrpc/ezjscore calls
- webservices/proxy: view used to allow javascript code in eZ Publish pages to execute cross-domain webservice calls (ie. execute calls to other servers)
- webservices/execute: view used to execute webservice calls when not using a custom controller file


Template fetch functions:

- webservices/call: used to execute a webservice call to an external server in templates


Template operators:

- 'washxml', 'washxmlcomment', 'washxmlcdata': operators to be used to properly escape data in different xml contexts


Cronjobs:

- cronjob part 'rotatewslogs': rotates webservice logs generated by the extension. Max size of log files before rotation and number of rotated files to be kept are read from wsproviders.ini


Php classes:

- to be documented...


Javascript classes:

- to be documented...


FAQ:

  Q: how do I debug webservices without going insane?
  A1: you're a lucky guy, since this extension provides a nice grapgical debugger within the standard admin interface
  A2: by enabling logging, you n00b!
