GG Webservices for eZ publish
========================================

Goals:

Allow to easily execute calls to remote servers using the REST, JSONRPC, XMLRPC and SOAP protocols (both from within php code and templates)
Allow to expose existing functionality as JSONRPC or XMLRPC (and eventually REST) webservices, much as it can already be done with SOAP in any eZ Publish installation
Allow to expose functionality as webservice regardless of the protocol used by the client
Provide a proxy module allowing javascript code served by an eZ Publish server to execute cross-domain webservice calls (without resorting to html tricks) and even cross-protocol calls
Keep the same API as the existing eZ SOAP classes for maximum interoperability
Improve the existing http client adding features such as support for more authentication schemes, compressed requests etc...
Long term, the existing SOAP client could be replaced with a new one, based either on NuSOAP, eZSOAP, or PHP::SOAP
Allow easy debugging of webservice calls via inclusion of a complete debugging interface


Prerequisites:

PHP 5 / eZP 4.0+
to execute/receive jsonrpc calls, the php JSON extension is needed
to execute/receive rest calls, the php SIMPLEXML extension is needed
to execute/receive xmlrpc calls, the php XMLRPC extension is needed
to call remote services using wsdl descriptions the php SOAP extension is needed


Basics:

- every webservice server that has to be accessed from eZ Publish has to be defined in wsproviders.ini
- to receive xmlrpc or jsonrpc calls, you need to:
  1 - modify the configuration in wsproviders.ini and
  2 - create a file extension/xxx/jsonrpc/initialize.php with the php code to be exposed as webservice
- to call remote webservices from within templates use the fetch( 'webservices', 'call' ) template fetch function
  please remember to desactivate the view cache where needed for templates that execute webservice calls
- to call remote webservices from php code use ggeZWebServicesClient::send( $server, $metod, $params=array() );


Modules and Views:

- webservices/debugger: view used to display a WS debugger in the admin interface. Currently limited to jsonrpc/xmlrpc calls
- webservices/proxy: view used to allow javascript code in eZ Publish pages to execute cross-domain webservice calls (ie. execute calls to other servers)
- webservices/execute: reserved


Template fetch functions:

- webservices/call: used to execute a webservice call to an external server in templates


Template operators:

- 'washxml', 'washxmlcomment', 'washxmlcdata': operators to be used to properly escape data in different xml contexts


Php classes:

- to be documented...

FAQ:

  Q: how do I debug webservices without going insane?
  A1: you're a lucky guy, since this extension provides a nice grapgical debugger within the standard admin interface
  A2: by enabling logging, you n00b!
